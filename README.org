* 普段適当に作って使ってる小スクリプト群

  適当に作ってるので真面目にバージョン管理とか依存関係の解決とかはしてないスクリプト群です。

** Usage

   適当なところにチェックアウトして PATH を通しておきます

   #+begin_src sh
   $ git clone git@github.com:mugijiru/small-scripts.git /path/to/scripts
   $ echo 'export PATH="$PATH:/path/to/scripts"' >>~/.zshrc
   #+end_src

** Scripts
*** branch_name_from_pr
    GitHub の PR の URL からブランチ名を取得するだけの単純なスクリプト。
    基本的に他のスクリプトと組み合わせて使う

**** Dependency
     - Ruby
     - Octokit gem

**** Usage
     #+begin_example
     $ branch_name_from_pr GITHUB_PR_URL
     #+end_example

***** Example
      #+begin_example
      % branch_name_from_pr https://github.com/mugijiru/small-scripts/pull/4
      add-branch-name-from-pr
      #+end_example

*** count_issue
    GitHub の指定したラベルの Issue の数をカウントするスクリプト

*** Dependency
    - octokit gem
    - gemoji

*** Usage
    #+begin_example
    $ count_issue MY_ORGANIZATION REPOSITORY label1 [...]
    #+end_example

**** Example
     #+begin_example
     % count_issue MY_ORGANIZATION REPOSITORY ":skull:System Bug" ":gift:Tech Issue"
     💀 System Bug   6
     🎁 Tech Issue   5
     #+end_example

*** deploy
    capistrano の wrapper script
    デプロイ先の選択と、デプロイブランチの選択ができる。
    デプロイブランチは GitHub の URL を引数に指定することもできる

**** Dependency
     - このリポジトリ内のファイル
       - branch_name_from_pr
       - done_notify
     - 他
       - [[https://github.com/peco/peco][peco]]
       - [[https://github.com/github/hub][hub command]]
       - Capistrano

**** Usage
***** 引数指定なし
      #+begin_example
      $ deploy
      #+end_example

      まず最初にデプロイ先のリストが peco で表示されるのでそこから選択し、
      次にデプロイするブランチを peco で選択。

      デプロイ先を選択している時に非同期で GitHub のブランチを取得しているので
      デプロイ先の選択が早いと少し待たされます。

***** PR URL を指定
      #+begin_example
      % deploy https://github.com/YOUR_ORGANIZATION/YOUR_REPOSITORY/pull/PR_NUM
      #+end_example

      まず最初にデプロイ先のリストが peco で表示されるのでそこから選択すると
      デプロイが始まります

*** done_notify
    何かの実行が終了した時に通知するためのスクリプト。
    実行時間がかかる処理の最後に呼び出すとデスクトップ通知が来てちょっと便利。
    中身はただの terminal-notifier のラッパー

**** Dependency
     - terminal-notifier

**** Usage
     #+begin_example
     $ done_notify title text
     #+end_example

***** Example
      #+begin_example
      % done_notify Shell 'Finish heavy process!'
      #+end_example

      [[./images/done_notify.png]]

*** dump_with_date
    ローカル環境の mysqldump を取るスクリプト
    指定したディレクトリの下に sql というディレクトリを掘ってそこにデータを保存する。

    開発中にデータを戻したいことがよくあるので作った
    戻す時は [[*load_from_dump]] を使う

*** Dependency
    - MySQL

*** Usage
    #+begin_example
    $ dump_with_date database_name dump_base_dir
    #+end_example>

**** Example
     #+begin_example
     $ dump_with_date hoge_db /path/to/app
     #+end_example

*** load_from_dump
    [[*dump_with_date]] で dump したデータを戻すのに使うスクリプト

    dump_with_date が日付と番号を振るので
    それを引数に指定することで
    指定したデータを戻すこともできる。
    指定しなかった場合には最新のデータを戻す

*** Dependency
    - [[*dump_with_date]]
    - MySQL

*** Usage
    #+begin_example
    $ load_from_dump database_name dump_base_dir num date
    #+end_example

**** 最新データを戻す
     #+begin_example
     $ load_from_dump database_name dump_base_dir
     #+end_example

**** その日のデータを番号指定で戻す
     #+begin_example
     $ load_from_dump database_name dump_base_dir num
     #+end_example

     番号は 0-99 まで。0詰めは自動で行う。

**** 指定日のデータを番号指定で戻す
     #+begin_example
     $ load_from_dump database_name dump_base_dir num date
     #+end_example

     - 番号は 0-99 まで。0詰めは自動で行う。
     - 日付は YYYYMMDD 形式

**** Example
     #+begin_example
     $ dump_with_date hoge_db /path/to/app
     #+end_example


*** git-diff-from
    GitHub の PR みたいに
    マージ先との差分を見たい時に使ってるスクリプト。

    push 前に差分をチェックしておくと恥ずかしい PR を出さずに済んで便利

**** Dependency
     - Git

**** Usage
     #+begin_example
     $ git diff-from branch-name
     #+end_example

***** Example
      #+begin_example
      % git diff-from master
      diff --git a/git-diff-from b/git-diff-from
      new file mode 100755
      index 0000000..7c2e0d0
      --- /dev/null
      +++ b/git-diff-from
      @@ -0,0 +1,3 @@
      +#!/bin/sh
      +
      +git diff -w `git show-branch --merge-base $1 HEAD` HEAD
      #+end_example

*** my-slack-notifier
    Slack の任意のチャンネルに任意のテキストを飛ばすだけのシンプルなスクリプト。
    Emacs で利用するためにアイコンも名前も Emacs にしています。
    ただしアイコンは自分で Slack に :emacs: という絵文字として登録しておく必要あります。

**** Dependency
     - Ruby :: 2.3以上
       - 依存している slack-ruby-client という Gem が CI でテストしている一番古いバージョン
     - slack-ruby-client gem :: ~> 0.14.4
       - 実装時にインストールしたバージョンが 0.14.4

**** Usage
     Slack の[[https://api.slack.com/custom-integrations/legacy-tokens][レガシートークン]]を利用しているので
     それを取得して、以下のようにして環境変数に設定してください

     #+begin_src
     export MY_SLACK_TOKEN="YOUR_SLACK_LEGACY_TOKEN"
     #+end_src

     設定が済んだらスクリプトを実行します。
     第一引数にチャンネル名、第二引数にメッセージを入れます

     #+begin_src sh
     $ my-slack-notifier channel text
     #+end_src

***** Example
      #+begin_example
      $ my-slack-notifier "#general" "Hello, world"
      #+end_example

*** precompile_and_notify
    Rails の assets:precompile を行うスクリプト。
    終了時にデスクトップ通知するようにしている。

    自社の assets ファイルが多過ぎて
    手元で Feature spec を長す時に先に precompile しないと
    画面が表示されずにタイムアウトしてしまうし、
    開発時も同じく待たされることが多いので作った。

**** Dependency
     - このリポジトリ内のファイル
       - done_notify
     - 他
       - Rails

**** Usage
***** development env
      #+begin_example
      $ cd /path/to/rails_app_dir
      $ precompile_and_notify
      #+end_example

***** test env
      #+begin_example
      $ cd /path/to/rails_app_dir
      $ precompile_and_notify test
      #+end_example

*** release-note.rb
    リリースする度に Slack で報告しているけど、
    毎度の報告用テキストを作るのがだるいので
    git-pr-release で作られた PR の description を加工するスクリプトを作ってた。

    API 連携はしてないので Description の内容は自分でコピーしないといけないし、
    リリース報告に不要な PR とかは適宜手で取り除いて報告していた。
    という、無いよりはマシ程度のスクリプト。

**** Dependency
     - Ruby :: 2.3 以上
       - 新しい文法を使ってるわけでもないので 2.0 とかでも動きそう
     - git-pr-release
       - 直接は使ってないけど、こいつの出力を利用しているので

**** Usage
     1. デフォルトの git-pr-release のテンプレートを使って git-pr-release でリリース作業をする
     2. git-pr-release で作られた PR の description を手でコピーして
     3. ~pbpaste | release-note.rb~

***** Example
      #+begin_example
      - [x] #57 Gemfileの整理 @mugijiru
      #+end_example

      という内容がクリップボードにある時は以下のようになる

      #+begin_example
      % pbpaste | release-note.rb
      @channel
      お疲れ様です。
      先程、以下のリリースを行いました

      https://github.com/XXXXXX/YYYYY/pull/57
      Gemfileの整理

      以上になります。
      どうぞよろしくお願いします
      #+end_example
*** review-requested-prs
    指定したリポジトリで
    レビューを依頼されてる PR 一覧を取得するスクリプト

**** Dependency
     - octokit gem
     - gemoji gem

**** Usage
     #+begin_example
     $ review-requested-prs organization repository
     #+end_example

***** Example
      #+begin_example
      % review-requested-prs MY_ORGANIZATION REPOSITORY
      #XXX メソッド名を変更する [🙏 Review]
          https://github.com/MY_ORGANIZATION/REPOSITORY/pull/XXX
      #YYY デザイン修正 [🙏 Review]
          https://github.com/MY_ORGANIZATION/REPOSITORY/pull/YYY
      #+end_example
